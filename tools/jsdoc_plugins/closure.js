'use strict';

/**
 * @module jsdoc/plugins/closure
 */

/**
 * The logger module for jsdoc that is used by this plugin to signal warnings and errors.
 *
 * @private
 */
let logger = require('jsdoc/util/logger');

/**
 * All supported suppressions by the closure-compiler for the @suppress tag.
 * Can be found at https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/parsing/ParserConfig.properties#L151
 *
 * @type {Array<string>}
 *
 * @private
 */
const JSDOC_SUPPRESIONS = [
    'accessControls',
    'ambiguousFunctionDecl',
    'checkDebuggerStatement',
    'checkRegExp',
    'checkTypes',
    'checkVars',
    'closureDepMethodUsageChecks',
    'const',
    'constantProperty',
    'deprecated',
    'duplicate',
    'es5Strict',
    'externsValidation',
    'extraProvide',
    'extraRequire',
    'fileoverviewTags',
    'globalThis',
    'invalidCasts',
    'misplacedTypeAnnotation',
    'missingProperties',
    'missingProvide',
    'missingRequire',
    'missingReturn',
    'newCheckTypes',
    'newCheckTypesAllChecks',
    'nonStandardJsDocs',
    'reportUnknownTypes',
    'strictModuleDepCheck',
    'suspiciousCode',
    'transitionalSuspiciousCodeWarnings',
    'undefinedNames',
    'undefinedVars',
    'underscore',
    'unknownDefines',
    'unnecessaryCasts',
    'unusedLocalVariables',
    'unusedPrivateMembers',
    'uselessCode',
    'visibility',
    'with'
];

/**
 * All supported separators for the suppress tag. This allows to suppress several warnings/errors in one suppress tag.
 * More information at https://github.com/google/closure-compiler/wiki/Warnings#suppress-tags.
 *
 * @type {Array<string>}
 *
 * @private
 */
const JSDOC_SUPPRESS_SEPARATORS = [
    ',',
    '|'
];

// jscs:disable maximumLineLength
/**
 * The URL to the general description of the @suppress tag.
 *
 * @type {string}
 *
 * @private
 */
const SUPPRESS_TAG_URL = 'https://github.com/google/closure-compiler/wiki/Warnings#suppress-tags';
// jscs:enable maximumLineLength
// jscs:disable maximumLineLength
/**
 * The URL to all known suppressions that can be used for the @suppress tag to turn off warnings/errors generated by
 * the closure-compiler.
 *
 * @type {string}
 *
 * @private
 */
const SUPPRESSIONS_URL = 'https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/parsing/ParserConfig.properties#L151';
// jscs:enable maximumLineLength

/**
 * Stores the current file name of the parsed JS file. This name can be used for giving better error/warning messages.
 * This varaible is set in the <tt>jsdocCommentFound</tt> handler.
 *
 * @type {string}
 *
 * @private
 */
let currentFileName = '';
/**
 * Stores the line number of the currently parsed jsdoc comment. This line number can be used for giving better
 * error/warning messages. This varaible is set in the <tt>jsdocCommentFound</tt> handler.
 *
 * @type {number}
 *
 * @private
 */
let currentLineNumber = 0;
/**
 * Stores an ID to the currently processed comment to prevent duplicate warning/error messages.
 *
 * @type {string}
 *
 * @private
 */
let currentCommentId = '';

/**
 * Stores comment IDs of all handled comments including suppress tags.
 *
 * @type {Set<string>}
 *
 * @private
 */
let handledSuppressTags = new Set();

/**
 * Get all values set as suppressions in the <tt>@suppress</tt> tag.
 *
 * @returns {!Array<string>} Each string item represents one suppression item. All white space in the beginning and
 *          ending is removed from all entries.
 * @param {string} suppressValue The actual value of the <tt>@suppress</tt> tag.
 * @param {Array<string>} separators An array that contains all values that are used as separators between the
 *        suppressions.
 *
 * @private
 */
function getSuppressions (suppressValue, separators) {
    let result = [suppressValue.substring(1, suppressValue.length - 1)];
    let currentResult = [];
    for (let separator of separators || []) {
        for (let resultItem of result) {
            for (let currentItem of resultItem.split(separator)) {
                currentResult.push(currentItem);
            }
        }
        result = currentResult;
        currentResult = [];
    }
    return result.map((item) => {
        return item.trim();
    });
}

/**
 * A helper function to log warnings. Internally the jsdoc logger is used to generate the actual warning.
 *
 * @param {string} message The warning message.
 *
 * @private
 */
function logWarning (message) {
    logger.warn(`${message} File: ${currentFileName}, line: ${currentLineNumber}`);
}

/**
 * Validate the <tt>@suppress</tt> tag for correct syntax and all suppressions.
 * In error case a warning is printed - but the parsing process will continue.
 *
 * @param {Object} suppressTag The <tt>@suppress</tt> tag which was parsed by jsdoc and is passed in the
 *        <tt>onTagged</tt> event.
 *
 * @private
 */
function validateSuppressTag (suppressTag) {
    let tagValue = suppressTag.value || '';
    if (tagValue.length === 0 || !tagValue.startsWith('{') || !tagValue.endsWith('}')) {
        logWarning(`Bad syntax for "@suppress" (${SUPPRESS_TAG_URL})`);
        return;
    }
    for (let suppression of getSuppressions(tagValue, JSDOC_SUPPRESS_SEPARATORS)) {
        if (JSDOC_SUPPRESIONS.indexOf(suppression) === -1) {
            logWarning(`Unknown suppression (${suppression}) for "@suppress" (${SUPPRESSIONS_URL})`);
        }
    }
}

/**
 * Define an additional jsdoc tag called <tt>@suppress</tt>.
 *
 * @param {{defineTag: function(string, Object)}} dictionary The dictionary used by jsdoc. It includes all supported tags.
 */
module.exports.defineTags = (dictionary) => {
    dictionary.defineTag('suppress', {
        mustHaveValue: true,
        mustNotHaveDescription: true,
        onTagged: (doclet, suppressTag) => {
            if (!handledSuppressTags.has(currentCommentId)) validateSuppressTag(suppressTag);
            handledSuppressTags.add(currentCommentId);
        }
    });
};

/**
 * Define an additional handler for this plugin. It enables to use the parsed file name and line number. In addition it
 * is used to display proper errors/warnings.
 *
 * @type {{jsdocCommentFound: function({filename: string, lineno: number})}}
 */
module.exports.handlers = {
    /**
     *  This handler is invoked every time before a tag is parsed, i.e before <tt>onTagged</tt> is invoked.
     *
     * @param {{filename: string, lineno: number}} comment The currently found jsdoc comment.
     */
    jsdocCommentFound: (comment) => {
        currentFileName = comment.filename;
        currentLineNumber = comment.lineno;
        currentCommentId = `${comment.filename}:${comment.lineno}`;
    }
};
